/* automatically generated by rust-bindgen 0.69.4 */
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _SETJMP_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const UCI_CONFDIR: &[u8; 12] = b"/etc/config\0";
pub const UCI_SAVEDIR: &[u8; 10] = b"/tmp/.uci\0";
pub const UCI_DIRMODE: u32 = 448;
pub const UCI_FILEMODE: u32 = 384;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__sigset_t),
        "::",
        stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__jmp_buf_tag),
        "::",
        stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(__jmp_buf_tag),
        "::",
        stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(__jmp_buf_tag),
        "::",
        stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__fsid_t),
        "::",
        stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t__bindgen_ty_1),
        "::",
        stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t__bindgen_ty_1),
        "::",
        stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t),
        "::",
        stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t),
        "::",
        stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_G_fpos_t),
        "::",
        stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_G_fpos_t),
        "::",
        stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_G_fpos64_t),
        "::",
        stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_G_fpos64_t),
        "::",
        stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_FILE),
        "::",
        stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
                  -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(max_align_t),
        "::",
        stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(max_align_t),
        "::",
        stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const UCI_OK: _bindgen_ty_1 = 0;
pub const UCI_ERR_MEM: _bindgen_ty_1 = 1;
pub const UCI_ERR_INVAL: _bindgen_ty_1 = 2;
pub const UCI_ERR_NOTFOUND: _bindgen_ty_1 = 3;
pub const UCI_ERR_IO: _bindgen_ty_1 = 4;
pub const UCI_ERR_PARSE: _bindgen_ty_1 = 5;
pub const UCI_ERR_DUPLICATE: _bindgen_ty_1 = 6;
pub const UCI_ERR_UNKNOWN: _bindgen_ty_1 = 7;
pub const UCI_ERR_LAST: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_list {
    pub next: *mut uci_list,
    pub prev: *mut uci_list,
}
#[test]
fn bindgen_test_layout_uci_list() {
    const UNINIT: ::std::mem::MaybeUninit<uci_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_list>(),
        16usize,
        concat!("Size of: ", stringify!(uci_list))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_list>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_list),
        "::",
        stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_list),
        "::",
        stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_parse_context {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " uci_alloc_context: Allocate a new uci context"]
    pub fn uci_alloc_context() -> *mut uci_context;
}
extern "C" {
    #[doc = " uci_free_context: Free the uci context including all of its data"]
    pub fn uci_free_context(ctx: *mut uci_context);
}
extern "C" {
    #[doc = " uci_perror: Print the last uci error that occured\n @ctx: uci context\n @str: string to print before the error message"]
    pub fn uci_perror(ctx: *mut uci_context, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " uci_geterror: Get an error string for the last uci error\n @ctx: uci context\n @dest: target pointer for the string\n @str: prefix for the error message\n\n Note: string must be freed by the caller"]
    pub fn uci_get_errorstr(
        ctx: *mut uci_context,
        dest: *mut *mut ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " uci_import: Import uci config data from a stream\n @ctx: uci context\n @stream: file stream to import from\n @name: (optional) assume the config has the given name\n @package: (optional) store the last parsed config package in this variable\n @single: ignore the 'package' keyword and parse everything into a single package\n\n the name parameter is for config files that don't explicitly use the 'package <...>' keyword\n if 'package' points to a non-null struct pointer, enable delta tracking and merge"]
    pub fn uci_import(
        ctx: *mut uci_context,
        stream: *mut FILE,
        name: *const ::std::os::raw::c_char,
        package: *mut *mut uci_package,
        single: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_export: Export one or all uci config packages\n @ctx: uci context\n @stream: output stream\n @package: (optional) uci config package to export\n @header: include the package header"]
    pub fn uci_export(
        ctx: *mut uci_context,
        stream: *mut FILE,
        package: *mut uci_package,
        header: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_load: Parse an uci config file and store it in the uci context\n\n @ctx: uci context\n @name: name of the config file (relative to the config directory)\n @package: store the loaded config package in this variable"]
    pub fn uci_load(
        ctx: *mut uci_context,
        name: *const ::std::os::raw::c_char,
        package: *mut *mut uci_package,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_unload: Unload a config file from the uci context\n\n @ctx: uci context\n @package: pointer to the uci_package struct"]
    pub fn uci_unload(ctx: *mut uci_context, p: *mut uci_package) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_lookup_ptr: Split an uci tuple string and look up an element tree\n @ctx: uci context\n @ptr: lookup result struct\n @str: uci tuple string to look up\n @extended: allow extended syntax lookup\n\n if extended is set to true, uci_lookup_ptr supports the following\n extended syntax:\n\n Examples:\n   network.@interface[0].ifname ('ifname' option of the first interface section)\n   network.@interface[-1]       (last interface section)\n Note: uci_lookup_ptr will automatically load a config package if necessary\n @str must not be constant, as it will be modified and used for the strings inside @ptr,\n thus it must also be available as long as @ptr is in use.\n\n This function returns UCI_ERR_NOTFOUND if the package specified in the tuple\n string cannot be found.  Otherwise it will return UCI_OK.\n\n Note that failures in looking up other parts, if they are also specfied,\n including section and option, will also have a return value UCI_OK but with\n ptr->flags * UCI_LOOKUP_COMPLETE not set."]
    pub fn uci_lookup_ptr(
        ctx: *mut uci_context,
        ptr: *mut uci_ptr,
        str_: *mut ::std::os::raw::c_char,
        extended: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_add_section: Add an unnamed section\n @ctx: uci context\n @p: package to add the section to\n @type: section type\n @res: pointer to store a reference to the new section in"]
    pub fn uci_add_section(
        ctx: *mut uci_context,
        p: *mut uci_package,
        type_: *const ::std::os::raw::c_char,
        res: *mut *mut uci_section,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_set: Set an element's value; create the element if necessary\n @ctx: uci context\n @ptr: uci pointer\n\n The updated/created element is stored in ptr->last"]
    pub fn uci_set(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_add_list: Append a string to an element list\n @ctx: uci context\n @ptr: uci pointer (with value)\n\n Note: if the given option already contains a string value,\n it will be converted to an 1-element-list before appending the next element"]
    pub fn uci_add_list(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_del_list: Remove a string from an element list\n @ctx: uci context\n @ptr: uci pointer (with value)\n"]
    pub fn uci_del_list(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_reorder: Reposition a section\n @ctx: uci context\n @s: uci section to reposition\n @pos: new position in the section list"]
    pub fn uci_reorder_section(
        ctx: *mut uci_context,
        s: *mut uci_section,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_rename: Rename an element\n @ctx: uci context\n @ptr: uci pointer (with value)"]
    pub fn uci_rename(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_delete: Delete a section or option\n @ctx: uci context\n @ptr: uci pointer"]
    pub fn uci_delete(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_save: save change delta for a package\n @ctx: uci context\n @p: uci_package struct"]
    pub fn uci_save(ctx: *mut uci_context, p: *mut uci_package) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_commit: commit changes to a package\n @ctx: uci context\n @p: uci_package struct pointer\n @overwrite: overwrite existing config data and flush delta\n\n committing may reload the whole uci_package data,\n the supplied pointer is updated accordingly"]
    pub fn uci_commit(
        ctx: *mut uci_context,
        p: *mut *mut uci_package,
        overwrite: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_list_configs: List available uci config files\n @ctx: uci context\n\n caller is responsible for freeing the allocated memory behind list"]
    pub fn uci_list_configs(
        ctx: *mut uci_context,
        list: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_set_savedir: override the default delta save directory\n @ctx: uci context\n @dir: directory name\n\n This will also try adding the specified dir to the end of delta pathes."]
    pub fn uci_set_savedir(
        ctx: *mut uci_context,
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_set_savedir: override the default config storage directory\n @ctx: uci context\n @dir: directory name"]
    pub fn uci_set_confdir(
        ctx: *mut uci_context,
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_add_delta_path: add a directory to the search path for change delta files\n @ctx: uci context\n @dir: directory name\n\n This function allows you to add directories, which contain 'overlays'\n for the active config, that will never be committed.\n\n Adding a duplicate directory will cause UCI_ERR_DUPLICATE be returned."]
    pub fn uci_add_delta_path(
        ctx: *mut uci_context,
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_revert: revert all changes to a config item\n @ctx: uci context\n @ptr: uci pointer"]
    pub fn uci_revert(ctx: *mut uci_context, ptr: *mut uci_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_parse_argument: parse a shell-style argument, with an arbitrary quoting style\n @ctx: uci context\n @stream: input stream\n @str: pointer to the current line (use NULL for parsing the next line)\n @result: pointer for the result"]
    pub fn uci_parse_argument(
        ctx: *mut uci_context,
        stream: *mut FILE,
        str_: *mut *mut ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_set_backend: change the default backend\n @ctx: uci context\n @name: name of the backend\n\n The default backend is \"file\", which uses /etc/config for config storage"]
    pub fn uci_set_backend(
        ctx: *mut uci_context,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_validate_text: validate a value string for uci options\n @str: value\n\n this function checks whether a given string is acceptable as value\n for uci options"]
    pub fn uci_validate_text(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " uci_parse_ptr: parse a uci string into a uci_ptr\n @ctx: uci context\n @ptr: target data structure\n @str: string to parse\n\n str is modified by this function"]
    pub fn uci_parse_ptr(
        ctx: *mut uci_context,
        ptr: *mut uci_ptr,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_lookup_next: lookup a child element\n @ctx: uci context\n @e: target element pointer\n @list: list of elements\n @name: name of the child element\n\n if parent is NULL, the function looks up the package with the given name"]
    pub fn uci_lookup_next(
        ctx: *mut uci_context,
        e: *mut *mut uci_element,
        list: *mut uci_list,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " uci_parse_section: look up a set of options\n @s: uci section\n @opts: list of options to look up\n @n_opts: number of options to look up\n @tb: array of pointers to found options"]
    pub fn uci_parse_section(
        s: *mut uci_section,
        opts: *const uci_parse_option,
        n_opts: ::std::os::raw::c_int,
        tb: *mut *mut uci_option,
    );
}
extern "C" {
    #[doc = " uci_hash_options: build a hash over a list of options\n @tb: list of option pointers\n @n_opts: number of options"]
    pub fn uci_hash_options(tb: *mut *mut uci_option, n_opts: ::std::os::raw::c_int) -> u32;
}
pub const uci_type_UCI_TYPE_UNSPEC: uci_type = 0;
pub const uci_type_UCI_TYPE_DELTA: uci_type = 1;
pub const uci_type_UCI_TYPE_PACKAGE: uci_type = 2;
pub const uci_type_UCI_TYPE_SECTION: uci_type = 3;
pub const uci_type_UCI_TYPE_OPTION: uci_type = 4;
pub const uci_type_UCI_TYPE_PATH: uci_type = 5;
pub const uci_type_UCI_TYPE_BACKEND: uci_type = 6;
pub const uci_type_UCI_TYPE_ITEM: uci_type = 7;
pub const uci_type_UCI_TYPE_HOOK: uci_type = 8;
pub type uci_type = ::std::os::raw::c_uint;
pub const uci_option_type_UCI_TYPE_STRING: uci_option_type = 0;
pub const uci_option_type_UCI_TYPE_LIST: uci_option_type = 1;
pub type uci_option_type = ::std::os::raw::c_uint;
pub const uci_flags_UCI_FLAG_STRICT: uci_flags = 1;
pub const uci_flags_UCI_FLAG_PERROR: uci_flags = 2;
pub const uci_flags_UCI_FLAG_EXPORT_NAME: uci_flags = 4;
pub const uci_flags_UCI_FLAG_SAVED_DELTA: uci_flags = 8;
pub type uci_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_element {
    pub list: uci_list,
    pub type_: uci_type,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uci_element() {
    const UNINIT: ::std::mem::MaybeUninit<uci_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_element>(),
        32usize,
        concat!("Size of: ", stringify!(uci_element))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_element>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_element))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_element),
        "::",
        stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_element),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_element),
        "::",
        stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_backend {
    pub e: uci_element,
    pub list_configs: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut uci_context) -> *mut *mut ::std::os::raw::c_char,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut uci_context,
            name: *const ::std::os::raw::c_char,
        ) -> *mut uci_package,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut uci_context, p: *mut *mut uci_package, overwrite: bool),
    >,
    pub ptr: *const ::std::os::raw::c_void,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_uci_backend() {
    const UNINIT: ::std::mem::MaybeUninit<uci_backend> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_backend>(),
        72usize,
        concat!("Size of: ", stringify!(uci_backend))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_backend>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_backend))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_configs) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(list_configs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_backend),
        "::",
        stringify!(priv_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_context {
    pub root: uci_list,
    pub pctx: *mut uci_parse_context,
    pub backend: *mut uci_backend,
    pub backends: uci_list,
    pub flags: uci_flags,
    pub confdir: *mut ::std::os::raw::c_char,
    pub savedir: *mut ::std::os::raw::c_char,
    pub delta_path: uci_list,
    pub err: ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_char,
    pub trap: jmp_buf,
    pub internal: bool,
    pub nested: bool,
    pub buf: *mut ::std::os::raw::c_char,
    pub bufsz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_uci_context() {
    const UNINIT: ::std::mem::MaybeUninit<uci_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_context>(),
        328usize,
        concat!("Size of: ", stringify!(uci_context))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_context>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backends) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(backends)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confdir) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(confdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savedir) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(savedir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_path) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(delta_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trap) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        304usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nested) as usize - ptr as usize },
        305usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(nested)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        312usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufsz) as usize - ptr as usize },
        320usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_context),
        "::",
        stringify!(bufsz)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_package {
    pub e: uci_element,
    pub sections: uci_list,
    pub ctx: *mut uci_context,
    pub has_delta: bool,
    pub path: *mut ::std::os::raw::c_char,
    pub backend: *mut uci_backend,
    pub priv_: *mut ::std::os::raw::c_void,
    pub n_section: ::std::os::raw::c_int,
    pub delta: uci_list,
    pub saved_delta: uci_list,
}
#[test]
fn bindgen_test_layout_uci_package() {
    const UNINIT: ::std::mem::MaybeUninit<uci_package> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_package>(),
        128usize,
        concat!("Size of: ", stringify!(uci_package))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_package>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_package))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_delta) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(has_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_section) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(n_section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_delta) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_package),
        "::",
        stringify!(saved_delta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_section {
    pub e: uci_element,
    pub options: uci_list,
    pub package: *mut uci_package,
    pub anonymous: bool,
    pub type_: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uci_section() {
    const UNINIT: ::std::mem::MaybeUninit<uci_section> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_section>(),
        72usize,
        concat!("Size of: ", stringify!(uci_section))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_section>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_section))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_section),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_section),
        "::",
        stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).package) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_section),
        "::",
        stringify!(package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anonymous) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_section),
        "::",
        stringify!(anonymous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_section),
        "::",
        stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uci_option {
    pub e: uci_element,
    pub section: *mut uci_section,
    pub type_: uci_option_type,
    pub v: uci_option__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uci_option__bindgen_ty_1 {
    pub list: uci_list,
    pub string: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uci_option__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<uci_option__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_option__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(uci_option__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_option__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_option__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option__bindgen_ty_1),
        "::",
        stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option__bindgen_ty_1),
        "::",
        stringify!(string)
        )
    );
}
#[test]
fn bindgen_test_layout_uci_option() {
    const UNINIT: ::std::mem::MaybeUninit<uci_option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_option>(),
        64usize,
        concat!("Size of: ", stringify!(uci_option))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_option>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option),
        "::",
        stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_option),
        "::",
        stringify!(v)
        )
    );
}
pub const uci_command_UCI_CMD_ADD: uci_command = 0;
pub const uci_command_UCI_CMD_REMOVE: uci_command = 1;
pub const uci_command_UCI_CMD_CHANGE: uci_command = 2;
pub const uci_command_UCI_CMD_RENAME: uci_command = 3;
pub const uci_command_UCI_CMD_REORDER: uci_command = 4;
pub const uci_command_UCI_CMD_LIST_ADD: uci_command = 5;
pub const uci_command_UCI_CMD_LIST_DEL: uci_command = 6;
pub const uci_command___UCI_CMD_MAX: uci_command = 7;
pub const uci_command___UCI_CMD_LAST: uci_command = 6;
pub type uci_command = ::std::os::raw::c_uint;
extern "C" {
    pub static uci_command_char: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_delta {
    pub e: uci_element,
    pub cmd: uci_command,
    pub section: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_uci_delta() {
    const UNINIT: ::std::mem::MaybeUninit<uci_delta> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_delta>(),
        56usize,
        concat!("Size of: ", stringify!(uci_delta))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_delta>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_delta))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_delta),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_delta),
        "::",
        stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_delta),
        "::",
        stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_delta),
        "::",
        stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_ptr {
    pub target: uci_type,
    pub flags: uci_ptr__bindgen_ty_1,
    pub p: *mut uci_package,
    pub s: *mut uci_section,
    pub o: *mut uci_option,
    pub last: *mut uci_element,
    pub package: *const ::std::os::raw::c_char,
    pub section: *const ::std::os::raw::c_char,
    pub option: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
pub const uci_ptr_UCI_LOOKUP_DONE: uci_ptr__bindgen_ty_1 = 1;
pub const uci_ptr_UCI_LOOKUP_COMPLETE: uci_ptr__bindgen_ty_1 = 2;
pub const uci_ptr_UCI_LOOKUP_EXTENDED: uci_ptr__bindgen_ty_1 = 4;
pub type uci_ptr__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_uci_ptr() {
    const UNINIT: ::std::mem::MaybeUninit<uci_ptr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_ptr>(),
        72usize,
        concat!("Size of: ", stringify!(uci_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(o)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).package) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(package)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_ptr),
        "::",
        stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uci_parse_option {
    pub name: *const ::std::os::raw::c_char,
    pub type_: uci_option_type,
}
#[test]
fn bindgen_test_layout_uci_parse_option() {
    const UNINIT: ::std::mem::MaybeUninit<uci_parse_option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uci_parse_option>(),
        16usize,
        concat!("Size of: ", stringify!(uci_parse_option))
    );
    assert_eq!(
        ::std::mem::align_of::<uci_parse_option>(),
        8usize,
        concat!("Alignment of ", stringify!(uci_parse_option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_parse_option),
        "::",
        stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(uci_parse_option),
        "::",
        stringify!(type_)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__va_list_tag),
        "::",
        stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(__va_list_tag),
        "::",
        stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(__va_list_tag),
        "::",
        stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(__va_list_tag),
        "::",
        stringify!(reg_save_area)
        )
    );
}
